@using ExamAplication.Admin.Models.Exam
@using Newtonsoft.Json
@model ExamUpdate

@{
    ViewData["Title"] = "Edit Exam";
    Layout = "_Layout";
}

<div class="container mt-4">
    <h2 class="mb-4"><i class="bi bi-pencil-square"></i> Edit Exam</h2>

    <form asp-action="Edit" method="post" class="needs-validation" novalidate>
       
        <input type="hidden" asp-for="Id" />

        <div class="mb-3">
            <label for="LessonCode" class="form-label">Lesson Code</label>
            <input type="text" class="form-control" id="LessonCode" name="LessonCode" maxlength="3" required
                   value="@Model?.LessonCode" />
            <div class="invalid-feedback">Lesson code is required.</div>
            @Html.ValidationMessageFor(m => m.LessonCode, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            <label for="StudentNumber" class="form-label">Student Number</label>
            <input type="number" class="form-control" id="StudentNumber" name="StudentNumber" required
                   value="@Model?.StudentNumber" min="0" max="99999" />
            <div class="invalid-feedback">Student number is required.</div>
            @Html.ValidationMessageFor(m => m.StudentNumber, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            <label for="ExamDate" class="form-label">Exam Date</label>
            <input type="date" class="form-control" id="ExamDate" name="ExamDate" required
                   value="@(Model?.ExamDate.ToString("yyyy-MM-dd"))" />
            <div class="invalid-feedback">Exam date is required.</div>
            @Html.ValidationMessageFor(m => m.ExamDate, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            <label for="Grade" class="form-label">Grade</label>
            <input type="number" class="form-control" id="Grade" name="Grade" required
                   value="@Model?.Grade" min="0" max="9" step="1" />
            <div class="invalid-feedback">Grade is required and must be between 0 and 9.</div>
            @Html.ValidationMessageFor(m => m.Grade, "", new { @class = "text-danger" })
        </div>

        @{
            var lessonsSelectList = ViewBag.Lessons as SelectList ?? new SelectList(Enumerable.Empty<SelectListItem>(), "Value", "Text");
        }

        <div class="mb-3">
            <label for="LessonId" class="form-label">Lesson</label>
            @Html.DropDownListFor(model => model.LessonId, lessonsSelectList, new { @class = "form-select", @required = "required" })
            @Html.ValidationMessageFor(m => m.LessonId, "", new { @class = "text-danger" })
        </div>

        <button type="submit" class="btn btn-primary"><i class="bi bi-save"></i> Save Changes</button>
        <a href="@Url.Action("Index")" class="btn btn-secondary ms-2"><i class="bi bi-x-circle"></i> Cancel</a>
    </form>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }
                        form.classList.add('was-validated')
                    }, false)
                })
        })();

        @if (TempData["Success"] != null)
        {
            <text>
                <script>
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: '@TempData["Success"]'
                });
        </script>
            </text>
        }


        @if (TempData["ErrorList"] != null)
        {
            var errorList = JsonConvert.DeserializeObject<List<string>>(TempData["ErrorList"].ToString());

            <text>
            Swal.fire({
            icon: 'error',
            title: 'Validation Errors',
            html: `
            <ul>
                    @foreach (var err in JsonConvert.DeserializeObject<List<string>>(TempData["ErrorList"].ToString()))
                    {
                    <li>@err</li>
                    }
            </ul>`
            });
            </text>
        }
        </script>

}
